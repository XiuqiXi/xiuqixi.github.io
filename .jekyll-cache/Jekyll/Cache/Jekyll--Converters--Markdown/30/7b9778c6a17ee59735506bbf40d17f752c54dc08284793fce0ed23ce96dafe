I"ý!<aside class="sidebar__right">
<nav class="toc">
    <header><h4 class="nav__title"><i class="fa fa-file-text"></i> Contents</h4></header>
<ul class="toc__menu" id="markdown-toc">
  <li><a href="#random-numbers-between-0-and-1" id="markdown-toc-random-numbers-between-0-and-1">Random Numbers (between 0 and 1)</a></li>
  <li><a href="#sample-from-a-distribution-with-specified-probabilities" id="markdown-toc-sample-from-a-distribution-with-specified-probabilities">Sample from a distribution with specified probabilities</a></li>
</ul>

  </nav>
</aside>

<h1 id="random-numbers-between-0-and-1">Random Numbers (between 0 and 1)</h1>
<p><span style="display:block; 	float:left; 	font-family:Georgia; 	font-size: 310%; 	font-weight: bold; 	line-height: 90%; 	margin-right: 6px; 	margin-bottom:-2px; 	margin-top: 7px;">R</span>andom numbers are usually generated with the following code:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//include files</span>
<span class="cp">#include &lt;stdlib.h&gt;
#include &lt;time.h&gt;
</span>

<span class="c1">//code for generate random numbers</span>
<span class="n">srand</span><span class="p">(</span><span class="n">time</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span>
<span class="kt">double</span> <span class="n">rnum</span> <span class="o">=</span> <span class="p">((</span><span class="kt">double</span><span class="p">)</span><span class="n">rand</span><span class="p">()</span><span class="o">/</span><span class="n">RAND_MAX</span><span class="p">);</span>
</code></pre></div></div>

<p>However, in practice this usually doesnâ€™t work quite well. Because first, due to the <code class="language-plaintext highlighter-rouge">RAND_MAX</code> is expand to be <code class="language-plaintext highlighter-rouge">INT_MAX</code>, which is 32768, the random number generated are too coarse-grained. We can only get numbers like $\frac{1}{32768}$, $\frac{2}{32768}$ and so forth. Second, because the <code class="language-plaintext highlighter-rouge">srand()</code> function doesnâ€™t actually generate random numbers that spans well uniformly between 0 and 1, instead, it often gives numbers that are highly dependent on time, which will make random numbers concentrate at a specific region between 0 and 1 given a specific time.</p>

<p>Instead, we can use the following code to generate random numbers in range $[0, 1)$:</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;random&gt;
#include &lt;chrono&gt;
</span>

<span class="kt">double</span> <span class="nf">random_zero_to_one</span><span class="p">(){</span>
    <span class="n">std</span><span class="o">::</span><span class="n">mt19937_64</span> <span class="n">rng</span><span class="p">;</span>
    <span class="c1">// initialize the random number generator with time-dependent seed</span>
    <span class="kt">uint64_t</span> <span class="n">timeSeed</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">high_resolution_clock</span><span class="o">::</span><span class="n">now</span><span class="p">().</span><span class="n">time_since_epoch</span><span class="p">().</span><span class="n">count</span><span class="p">();</span>
    <span class="n">std</span><span class="o">::</span><span class="n">seed_seq</span> <span class="n">ss</span><span class="p">{</span><span class="kt">uint32_t</span><span class="p">(</span><span class="n">timeSeed</span> <span class="o">&amp;</span> <span class="mh">0xffffffff</span><span class="p">),</span> <span class="kt">uint32_t</span><span class="p">(</span><span class="n">timeSeed</span><span class="o">&gt;&gt;</span><span class="mi">32</span><span class="p">)};</span>
    <span class="n">rng</span><span class="p">.</span><span class="n">seed</span><span class="p">(</span><span class="n">ss</span><span class="p">);</span>
    <span class="c1">// initialize a uniform distribution between 0 and 1</span>
    <span class="n">std</span><span class="o">::</span><span class="n">uniform_real_distribution</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">unif</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
    <span class="c1">// ready to generate random numbers</span>
    <span class="k">const</span> <span class="kt">int</span> <span class="n">nSimulations</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="kt">double</span> <span class="n">currentRandomNumber</span> <span class="o">=</span> <span class="n">unif</span><span class="p">(</span><span class="n">rng</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">currentRandomNumber</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>If we want random numbers between $[1,2)$, we can simply change <code class="language-plaintext highlighter-rouge">unif(0,1)</code> to <code class="language-plaintext highlighter-rouge">unif(1,2)</code>.</p>

<h1 id="sample-from-a-distribution-with-specified-probabilities">Sample from a distribution with specified probabilities</h1>
<p>Actually, it doesnâ€™t need to be a distribution. It is the same problem if the user specified weights instead of a distribution in the given array. We can normalize the array to make it a distribution first. Then generate a random number in range $[0,1)$, say $r$. Then, for every value in the given distribution, say $D_i$, if $r &lt; D_i$, then return $i$ as the chosen index. Otherwise update $r$ by subtracting $D_i$:
\(r \leftarrow r - D_i\)
Then continue to next index until $r &lt; D_i$ is satisfied.</p>

<p>The code are shown bellow:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">random_sample</span><span class="p">(</span><span class="kt">double</span> <span class="n">distribution</span><span class="p">[],</span><span class="kt">int</span> <span class="n">size</span><span class="p">){</span>
        <span class="c1">//check if the array adds up to 1</span>
    <span class="kt">double</span> <span class="n">sum</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
    <span class="n">REP</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">size</span><span class="o">-</span><span class="mi">1</span><span class="p">){</span>
        <span class="n">sum</span> <span class="o">+=</span> <span class="n">distribution</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="p">}</span>

    <span class="k">if</span><span class="p">(</span><span class="n">sum</span> <span class="o">==</span> <span class="mf">1.0</span><span class="p">){</span><span class="c1">//valid</span>
        <span class="c1">// will generate [0,1)</span>
        <span class="kt">double</span> <span class="n">rnum</span> <span class="o">=</span> <span class="n">random_zero_to_one</span><span class="p">();</span>
        
        <span class="n">REP</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">size</span><span class="o">-</span><span class="mi">1</span><span class="p">){</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">rnum</span> <span class="o">&lt;</span> <span class="n">distribution</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="k">return</span> <span class="n">i</span><span class="p">;</span>
            <span class="k">else</span><span class="p">{</span>
                <span class="n">rnum</span> <span class="o">-=</span> <span class="n">distribution</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="c1">//didn't get a valid distribution</span>
		<span class="c1">//return -1 indicate that input not valid</span>
        <span class="k">return</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

:ET